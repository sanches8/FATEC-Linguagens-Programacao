- Orientação a Objetos -

	- O que é? - 

		- POO é um paradigma de programação que organiza o código em torno de objetos que representam entidades do mundo real e usas interações;

		- Esses objetos interagem entre si através de mensagens (chamadas de métodos)

		- Foco em reutilização de código, modularidade e abstração

	- Pilares da POO -

		- Encapsulamento: consiste em agrupar os dados/atributos e os méotodos/comportamentos que operam nesses dados em uma única unidade chamada de classe.

			- Oferece proteção dos dados, ocultação de implementação e reutilização do código: definir atribuots como privados ou públicos

		- Abstração: processo de simplificar a complexidade, focalizando nos aspsectos essenciais de um objeto e ignorando os detalhes não relevantes.
			
			- Facilita o gerenciamento de sistemas complexos, aumentando a modularidade e promovendo a reutilização do código.

		- Herança: é o mecanismo que permite que uma classe herde características (atributos e métodos) de outra classe base ou superclasse.

			- Classe "Veículo" pode ser uma superclasse de "carro" e "moto", herdando característica como "velocidade" e "cor"
		
		- Polimorfismo: permite que objetos de classes diferentes sejam tratados de forma uniforme, permitindo a sobrescrita de métodos. Basicamente um mesmo método pode 
		se comportar de mais de uma maneira.

	- Classes -

		- É a base da orientação a objetos e podemos definir como uma implementação de um tipo abstrato de dados que modela objetos do mundo real (uma referência)
		- Em termos simples, uma classe é uma planta ou um modelo que define como os objetos serão criados. Ela contém a estrutura e o comportamento que os objetos de uma 
		  categoria particular compartilharão. Uma classe é como um projeto para a criação de objetos.Pense em uma classe como um modelo de carro e 
                  em um objeto como um carro específico (um Toyota Corolla vermelho de 2023, por exemplo).

			- Instanciar :Em programação orientada a objetos, chama-se instância de uma classe, um objeto cujo comportamento e estado são definidos pela classe. 
			“Instância” é, neste caso, um anglicismo, significando “caso” ou “exemplo” (em inglês instance). Criar um objeto.

	- Métodos - 

		- É algo que contém linhas de código, similar a funções, quando chamados, executa algo especifico.

		- Método construtor: tem o mesmo nome que a classe e a instancia.Também conhecidos pelo inglês constructors, 
		  os construtores são os responsáveis por criar o objeto em memória, ou seja, instanciar a classe que foi definida. 
		  Eles são obrigatórios e são declarados

			- construtor padrao sem parametros: Pessoa pessoa = new Pessoa();
			
			- Usado para inicializar as variáveis da classe;

			- Características -

				- Deve ter o mesmo nome que classe;

				- Não tem nenhum tipo de retorno;

				- Inicializa membros de objetos (utilizado para atribuir valores iniciais também)

				- É possível realizar vários métodos com o mesmo nome (e mesmo tipo de retorno), sobrecarregando-o. Tem o mesmo nome, mas difere
				pelos parametros passados. Várias versões do mesmo construtor.


			public string Marca;
			public string Modelo;
			public int Ano;
			//Recebem os parametros

			- public Carro(string marca, string modelo, int ano){
				Marca = modelo;
				Modelo = modelo;
				Ano = ano;
				//Passa os parametros (marca, modelo, ano para as variaveis Marca - variavel publica acima -, Modelo, Ano)
			}

	- Getters e Setters
	
	    - São métodos especiais usados para obter (get) e definir (set) os valores de atributos de uma classe (pegar e adicionar infos)
	    - Usados normalmente para o encapsulamento

		- Getters (acessados): permite acessar o valor de um atributo de uma classe. Fornece apenas leitura ao valor do atributo


- UML

	- Representação de um sistema orientado a objetos por meio de esquemas, assim como o BPM;

	- Representação do fluxo normal (caso tudo ocorra normalmente) e do fluxo alternativo (caso tudo ocorra de forma não planeja);

	- Quanto mais ocmplexos, mais diagramas são utilizados.

	- * A arquitetura de software leva em considerção além das tecnologias, os modelos de negócios e compontes.


	- Diagrama de atividades - 

		- Fluxo de controle: utiliza um fluxo similar ao BPM, porém quando uma ação está completa, ela passa diretamente à próxima ação.

		- Ponto de decisão: um ponto no fluxo de controle, uma condicional com as condições de guarda ("sim" ou "não", ou seja, os caminhos. Caso a condição de guarda seja "sim", então).

		-
	